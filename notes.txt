// compile code :  gcc -o [exe name] [programname].c

// Pointer is a variable that holds the memory address of another varibale.

// %d - Decimal  -- receive data value
// %u - Unsigned Decimal -- receive data value
// %x - Hexadecimal -- receive data value

// %s - String -- expects to be given a memory address , it prints the data at the memory address until a null byte is encountered
// %n - Number of bytes written so far  -- expects to be given memory address. It writes the number of bytes that have been written so far into the memory adress

// Parameter Output Type % d Decimal % u Unsigned decimal % x Hexadecimal Parameter Output Type % s String % n Number of bytes written so far .

// Typecasting - temporarily changing the datatype of a variable.

// atoi() -- This function converts data types. It accepts a pointer to a string as an argument and returns the integer value it represents.

// Segmentation fault -- When a program tries to access an address that is out of bound(zero/0x00000000).
                         When a program tries to access this memory address (0x00000000), it crashed with a segmentation fault.


// gdb -q ./stack_example.exe - check how program is placed in memory code as it runs
// disass

// Compiled code goes into the text segment of memory
// Variables goes into the rest : 
   Stack - local variables 
   Heap - Used for dynamic memory allocation during runtime, managed by a programmer (me :) )
   BSS - Stores uninitialised global or static variables, managed by the system
        int global_variable; // Initialized to zero in BSS segment
        int main() {
            static int static_variable; // Initialized to zero in BSS segment
            return 0;
        }
   Data - Stores initialised global or static varibales, managed by the system. 
        int global_variable = 42; // Initialized with the value 42 in Data segment
        int main() {
            static int static_variable = 100; // Initialized with the value 100 in Data segment
            return 0;
        }

fwrite() -- Opens a file, if the file doesnt exist, it will be created
         -- "w" mode for opening the file for writting purposes.
         -- "wb" similar to "w" but for writting binary to the file
         -- "a" for appending to a file
         -- "ab" opening the file for binary appending
CreateFile() -- Used to open a file in reading mode
             -- FILE_SHARE_READ mode allows other processes to read from the file concurrently
             -- OPEN_EXISTING specifies that the file should only be opened if it exists
WriteFile() -- Write data to a file in binary mode.

CloseHandle() -- Used to close the file

A block of memory/memory(1 Byte) has 8 bits

Integer -- Has 4 bytes in 32 bit systems(x86) 00000000 00000000 00000000 00000001
        -- Has 8 bytes in 64 bit systems 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001

String -- A character in a string occupies 1 byte, i.e, each character has its own byte.

